# Sections for bumpversion
[bumpversion]
current_version = {{ cookiecutter.version }}
commit = True
tag = True

[bumpversion:file:setup.py]
search = version='{current_version}'
replace = version='{new_version}'

[bumpversion:file:{{ cookiecutter.project_slug }}/__init__.py]
search = __version__ = '{current_version}'
replace = __version__ = '{new_version}'

{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}
[metadata]
name = {{ cookiecutter.project_slug }}
summary = {{ cookiecutter.project_short_description }}
author = {{ cookiecutter.full_name.replace('\"', '\\\"') }}
author-email = {{ cookiecutter.email }}
{%- if cookiecutter.open_source_license in license_classifiers %}
license = {{ cookiecutter.open_source_license }}
{%- endif %}
{%- if cookiecutter.project_url  %}
home-page = {{ cookiecutter.project_url }}
{%- endif %}
description-file = README.rst
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifier =
    Development Status :: 3 - Alpha
    Programming Language :: Python
    Intended Audience :: Developers
{%- if cookiecutter.open_source_license in license_classifiers %}
        {{ license_classifiers[cookiecutter.open_source_license] }}
{%- endif %}
    Natural Language :: English
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.5

[entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = apyt.module:function
# For example:
# console_scripts =
#     fibonacci = apyt.skeleton:run
# as well as other entry_points.

[files]
# Add here 'data_files', 'packages' or 'namespace_packages'.
# Additional data files are defined as key value pairs of source and target:
packages =
    {{ cookiecutter.project_slug }}
# data_files =
#    share/{{ cookiecutter.project_slug }}_doc = doc/*

[extras]
# Add here additional requirements for extra features, like:
# PDF =
#    ReportLab>=1.2
#    RXP

[test]
# py.test options when running `python setup.py test`
addopts = test

[pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov {{ cookiecutter.project_slug }} --cov-report term-missing
    --verbose

[aliases]
docs = build_sphinx

[bdist_wheel]
universal = 1

[flake8]
exclude = docs
